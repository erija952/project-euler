-module(pr2).
-compile(export_all).
-include_lib("eunit/include/eunit.hrl").

%%Each new term in the Fibonacci sequence is generated by adding
%%the previous two terms. By starting with 1 and 2,
%% the first 10 terms will be:
%%1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

%%By considering the terms in the Fibonacci sequence whose values
%%do not exceed four million, find the sum of the even-valued terms.

pr2_test_() ->
    [?_assert(fib(0) =:= 1),
    ?_assert(fib(1) =:= 1),
    ?_assert(fib(2) =:= 2),
    ?_assert(fib(3) =:= 3),
    ?_assert(fib(4) =:= 5),
    ?_assert(fib(5) =:= 8),
    ?_assertException(error, function_clause, fib(-1)),
    ?_assert(fib(31) =:= 2178309),
    ?_assert(addFib(6,1,0) =:= 2),
    ?_assert(addFib(90,1,0) =:= 44),
    ?_assert(verifyFibSum(31,4000) =:= false),
    ?_assert(verifyFibSum(32,4000) =:= true), 
    ?_assert(verifyFibSum(31,20) =:= stop)
    ].

addFib(MaxNumber,Loop,Sum) ->
case verifyFibSum(fib(Loop),MaxNumber) of
     true -> addFib(MaxNumber,Loop+1,Sum + fib(Loop));
     false -> addFib(MaxNumber,Loop+1,Sum);
     stop -> Sum
end.
       
fib(0) -> 1;
fib(1) -> 1;
fib(N) when N > 1 -> fib(N-1) + fib(N-2).


verifyFibSum(Value,MaxVal) when Value < MaxVal, Value rem 2 == 0 -> true;
verifyFibSum(Value,MaxVal) when Value < MaxVal, Value rem 2 == 1 -> false; 
verifyFibSum(_,_) -> stop.
